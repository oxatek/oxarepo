IGNORER DES FICHIERS

Dans un tel cas, on peut énumérer les radicaux ou extensions de noms de fichiers
à ignorer dans un fichier nommé ".gitignore".
Exemple de fichier .gitignore :

    $ cat .gitignore
    *.[oa]
    *~

La première ligne ordonne à Git d'ignorer tout fichier se terminant en .o ou .a
La seconde ligne indique à Git d'ignorer tous les fichiers se terminant par un
tilde (~), ou fichiers temporaires.
Renseigner un fichier .gitignore avant de commencer à travailler est une bonne
idée qui évitera de valider des fichiers inutiles dans le dépôt Git.

Les règles de construction des patrons à placer dans le fichier .gitignore:

    - les lignes vides ou commençant par # sont ignorées ;
    - les patrons standards de fichiers sont utilisables ;
    - si le patron se termine par une barre oblique (/),
    indique un répertoire ;
    - un patron commençant par un point d'exclamation (!) indique des fichiers à
     inclure malgré les autres règles.

Les patrons standards de fichiers sont des expressions régulières simplifiées
utilisées par les shells.

Voici un exemple de fichier .gitignore :

    # un commentaire, cette ligne est ignorée
    # pas de fichier .a
    *.a
    # mais suivre lib.a malgré la règle précédente
    !lib.a
    # ignorer uniquement le fichier TODO à la racine du projet
    /TODO
    # ignorer tous les fichiers dans le répertoire build
    build/
    # ignorer doc/notes.txt, mais pas doc/server/arch.txt
    doc/*.txt
    # ignorer tous les fichiers .txt sous le répertoire doc/
    doc/**/*.txt

INSPECTER LES MODIFICATIONS INDEXÉES ET NON INDEXÉES

Pour voir précisément les modifications apportées aux fichiers avant commit.
La commande "$ git diff" permet d'afficher les lignes qui ont été ajoutées ou
modifiées.

Supposons que vous éditez et indexez le fichier LISEZMOI et que vous éditez le
fichier benchmarks.rb sans l'indexer.
Si vous lancez la commande git status, vous obtiendrez :

    $ git status
    On branch master
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

            new file:   LISEZMOI

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

            modified:   benchmarks.rb

Pour visualiser ce qui a été modifié mais pas encore indexé, tapez juste:
"$ git diff" sans autre argument.

    $ git diff
    diff --git a/benchmarks.rb b/benchmarks.rb
    index 3cb747f..da65585 100644
    --- a/benchmarks.rb
    +++ b/benchmarks.rb
    @@ -36,6 +36,10 @@ def main
               @commit.parents[0].parents[0].parents[0]
             end

    +        run_code(x, 'commits 1') do
    +          git.commits.size
    +        end
    +
             run_code(x, 'commits 2') do
               log = git.commits('master', 15)
               log.size

Le résultat indique les modifications apportées et non indexées.

Si vous souhaitez visualiser les modifications indexées qui feront partie du
prochain commit, vous pouvez utiliser "$ git diff --cached"
Les versions récentes de Git utilisent aussi "$ git diff --staged"
Cette commande compare les fichiers indexés et le dernier instantané.

    $ git diff --cached
    diff --git a/LISEZMOI b/LISEZMOI
    new file mode 100644
    index 0000000..03902a1
    --- /dev/null
    +++ b/LISEZMOI2
    @@ -0,0 +1,5 @@
    +grit
    + by Tom Preston-Werner, Chris Wanstrath
    + http://github.com/mojombo/grit
    +
    +Grit is a Ruby library for extracting information from a Git repository

Noter que $ git diff ne montre pas les modifications réalisées depuis le dernier
commit — seulement les modifications qui sont non indexées.
Cela peut introduire une confusion car si tous les fichiers modifiés ont été
indexés, git diff n'indiquera aucun changement.

Exemple, si vous indexez le fichier benchmarks.rb et l'éditez ensuite

    $ git add benchmarks.rb
    $ echo '# test line' >> benchmarks.rb
    $ git status
    # On branch master
    #
    # Changes to be committed:
    #
    #   modified:   benchmarks.rb
    #
    # Changes not staged for commit:
    #
    #   modified:   benchmarks.rb
    #

Utiliser git diff pour visualiser les modifications non indexées :

    $ git diff
    diff --git a/benchmarks.rb b/benchmarks.rb
    index e445e28..86b2f7c 100644
    --- a/benchmarks.rb
    +++ b/benchmarks.rb
    @@ -127,3 +127,4 @@ end
     main()

     ##pp Grit::GitRuby.cache_client.stats
    +# test line

et "$ git diff --cached" pour visualiser ce qui a été indexé jusqu'à maintenant

    $ git diff --cached
    diff --git a/benchmarks.rb b/benchmarks.rb
    index 3cb747f..e445e28 100644
    --- a/benchmarks.rb
    +++ b/benchmarks.rb
    @@ -36,6 +36,10 @@ def main
              @commit.parents[0].parents[0].parents[0]
            end

    +        run_code(x, 'commits 1') do
    +          git.commits.size
    +        end
    +
            run_code(x, 'commits 2') do
              log = git.commits('master', 15)
              log.size

Valider vos modifications.
    $ git commit

L'éditeur affiche le texte suivant :

    # Please enter the commit message for your changes. Lines starting
    # with '#' will be ignored, and an empty message aborts the commit.
    # On branch master
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    #       new file:   LISEZMOI
    #       modified:   benchmarks.rb
    ~
    ~
    ~
    ".git/COMMIT_EDITMSG" 10L, 283C

Le message de validation par défaut contient une ligne vide suivie par le
résultat de la commande git status.
Vous pouvez effacer ces lignes de commentaire et saisir votre commentaire,
ou vous pouvez les laisser; d'une autre manière, vous pouvez spécifier votre
message de validation, la commande git commit en le saisissant l'option -m

    $ git commit -m "Story 182: Fix benchmarks for speed"
    [master]: created 463dc4f: "Fix benchmarks for speed"
     2 files changed, 3 insertions(+), 0 deletions(-)
     create mode 100644 LISEZMOI

Nous constatons que que le commit fournit quelques informations sur lui-même,
- sur quelle branche vous avez validé (master), quelle est sa somme de contrôle
SHA-1 (463dc4f)
- combien de fichiers ont été modifiés, et des statistiques sur les lignes
ajoutées, modifiées et effacées dans ce commit.

ÉLIMINER LA PHASE D'INDEXATION

L'ajout de l'option -a à la commande git commit ordonne à Git de placer automa-
-tiquement tout fichier déjà en suivi de version dans la zone d'index avant de
réaliser la validation, évitant ainsi d'avoir à taper les commandes git add :

  $ git status
  # On branch master
  #
  # Changes not staged for commit:
  #
  #   modified:   benchmarks.rb
  #
  $ git commit -a -m 'added new benchmarks'
  [master 83e38c7] added new benchmarks
   1 files changed, 5 insertions(+), 0 deletions(-)

EFFACER DES FICHIERS

Pour effacer un fichier de Git, vous devez l'éliminer des fichiers en suivi de
version (plus précisément, l'effacer dans la zone d'index) puis valider.
La commande "$ git rm" réalise cette action mais efface aussi ce fichier de
votre copie de travail de telle sorte que vous ne le verrez pas réapparaître
comme fichier non suivi en version à la prochaine validation.

Si vous effacez simplement le fichier dans votre copie de travail, il apparaît sous la section « Changes not staged for commit » (c'est-à-dire, non indexé) dans le résultat de git status :

  $ rm grit.gemspec
  $ git status
  # On branch master
  #
  # Changes not staged for commit:
  #   (use "git add/rm <file>..." to update what will be committed)
  #
  #       deleted:    grit.gemspec
  #

Ensuite, si vous lancez $ git rm, l'effacement du fichier est indexé :

  $ git rm grit.gemspec
  rm 'grit.gemspec'
  $ git status
  # On branch master
  #
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #       deleted:    grit.gemspec
  #

Lors de la prochaine validation, le fichier sera absent et non-suivi en version.
Si vous avez auparavant modifié et indexé le fichier, son élimination doit être
forcée avec l'option -f.
C'est une mesure de sécurité pour empêcher un effacement accidentel de données
qui n'ont pas encore été enregistrées dans un instantané et qui seraient défini-
-tivement perdues.

Un autre scénario serait de vouloir abandonner le suivi de version d'un fichier
tout en le conservant dans la copie de travail.
Ceci est particulièrement utile lorsqu'on a oublié de spécifier un patron dans
le fichier .gitignore et on a accidentellement indexé un fichier, tel qu'un gros
fichier de journal ou une série d'archives de compilation .a. Pour réaliser ce
scénario, utilisez l'option --cached :

  $ git rm --cached readme.txt

Vous pouvez spécifier des noms de fichiers ou de répertoires, ou des patrons de
fichiers à la commande git rm. Cela signifie que vous pouvez lancer des
commandes telles que :

  $ git rm log/\*.log

Notez bien la barre oblique inverse (\) devant *.
Il est nécessaire d'échapper le caractère * car Git utilise sa propre expansion
de nom de fichier en addition de l'expansion du shell. Ce caractère d'échapp-
-ement doit être omis sous Windows si vous utilisez le terminal système.
Cette commande efface tous les fichiers avec l'extension .log présents dans le
répertoire log/. Vous pouvez aussi lancer une commande telle que :

  $ git rm \*~

Cette commande élimine tous les fichiers se terminant par ~.
Déplacer des fichiers

Git ne suit pas explicitement les mouvements des fichiers.
Si vous renommez un fichier suivi par Git, aucune méta-donnée indiquant le
renommage n'est stockée par Git.
Git est assez malin pour s'en apercevoir.

De ce fait, que Git ait une commande mv peut paraître trompeur.
Si vous souhaitez renommer un fichier dans Git:

  $ git mv nom_origine nom_cible

et cela fonctionne.

  $ git mv LISEZMOI.txt LISEZMOI
  $ git status
  # On branch master
  # Your branch is ahead of 'origin/master' by 1 commit.
  #
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #       renamed:    LISEZMOI.txt -> LISEZMOI
  #

Néanmoins, cela revient à lancer les commandes suivantes :

  $ mv LISEZMOI.txt LISEZMOI
  $ git rm LISEZMOI.txt
  $ git add LISEZMOI

Git trouve implicitement que c'est un renommage, donc cela importe peu si vous
renommez un fichier de cette manière ou avec la commande mv.
La seule différence réelle est que mv ne fait qu'une commande à taper au lieu de
trois — c'est une commande de convenance.
Le point principal est que vous pouvez utiliser n'importe quel outil pour
renommer un fichier, et traiter les commandes add/rm plus tard, avant de valider
la modification.
